<?php

/**
 * @file
 * Provides Clerky module main functionality.
 */

module_load_include('inc', 'clerkly', 'queries');
module_load_include('inc', 'clerkly', 'validators');
module_load_include('inc', 'clerkly', 'helpers');


/**
 * Implements hook_init().
 */

function clerkly_init() {
    if (arg(0) != 'admin') {
        $path = drupal_get_path('module', 'clerkly');
        drupal_add_css($path . '/assets/css/styles.css', array('group' => CSS_DEFAULT));
        drupal_add_library('system', 'jquery');
        drupal_add_js($path . '/assets/js/helpers.js', array('type' => 'file', 'group' => 'JS_DEFAULT'));
        drupal_add_js($path . '/assets/js/script.js', array('type' => 'file', 'group' => 'JS_DEFAULT'));

        ctools_include('modal');
        ctools_modal_add_js();

        drupal_add_js(array(
            'CToolsModal' => array(
                'modalSize' => array(
                    'type' => 'fixed',
                    'width' => 'auto',
                    'height' => 'auto',
                    'contentBottom' => 800),
            )
        ), 'setting');
    }
}

/**
 * Implements hook_menu().
 */

function clerkly_menu() {

    $items = array();

    $items['admin/config/clerkly'] = array(
        'title' => 'Clerkly Settings',
        'description' => 'Here you can define Clerkly module global settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('clerkly_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'file' => 'clerkly.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );

    $items['clerkly-popup/%node'] = array(
        'title' => 'Clerkly Typo Request',
        'access callback' => true,
        'page arguments' =>array(1),
        'page callback' => '_on_modal_show',
        'type' => MENU_CALLBACK,
    );

    return $items;

}

/**
 * Implements hook_form_field_ui_field_edit_form_alter().
 */

function clerkly_form_field_ui_field_edit_form_alter(&$form, &$form_state)
{
    $field_type = $form['#field']['type'];
    $instance = $form['#instance'];

    if ($field_type == 'text_with_summary' || $field_type == 'text_long' || $field_type == 'text') {

        $clerkly_settings = array();

        if (isset($instance['settings']['clerkly_settings'])) {
            $clerkly_settings = $instance['settings']['clerkly_settings'];
        }


        $form['instance']['settings'] += array(
            'clerkly_settings' => array(
                '#type' => 'fieldset',
                '#title' => t('Clerkly Settings'),
                '#collapsible' => TRUE,
                '#collapsed' => FALSE,
                '#weight' => 100,

                'clerkly_is_active' => array(
                    '#type' => 'select',
                    '#title' => t('Activate for current field:'),
                    '#description' => t('Activates/Deactivates Clerkly typo module for this field'),
                    '#default_value' => isset($clerkly_settings['clerkly_is_active'])
                        ? $clerkly_settings['clerkly_is_active'] : true,
                    '#options' => array(
                        false => t('Deactivate'),
                        true => t('Activate'),
                    ),
                    '#element_validate' => array('element_validate_rich_text_enabled')
                ),
                'clerkly_email_typo' => array(
                    '#type' => 'textfield',
                    '#title' => t('Info Email'),
                    '#description' => t('Information Email that is used for sending of typo information'),
                    '#default_value' => isset($clerkly_settings['clerkly_email_typo'])
                                            ? $clerkly_settings['clerkly_email_typo'] : '',
                    '#element_validate' => array('element_validate_email')

                ),
                'clerkly_typo_length' => array(
                    '#type' => 'textfield',
                    '#title' => t('Typo Max Length'),
                    '#description' => t('Selected typo length'),
                    '#default_value' => isset($clerkly_settings['clerkly_typo_length'])
                                            ? $clerkly_settings['clerkly_typo_length'] : '',
                    '#element_validate' => array('element_validate_integer_positive', 'element_validate_max_length')

                ),
                'clerkly_popup_text' => array(
                    '#type' => 'textfield',
                    '#maxlength' => 255,
                    '#title' => t('Popup text'),
                    '#description' => t('Shows text for user in popup'),
                    '#default_value' => isset($clerkly_settings['clerkly_popup_text'])
                                            ? $clerkly_settings['clerkly_popup_text'] : ''

                )
            )

        );
    }
}

/**
 * Implements hook_preprocess_field().
 */

function clerkly_preprocess_field(&$variables)  {
    $field = &$variables['element'];

    if ($field['#field_type'] == 'text_with_summary' || $field['#field_type'] == 'text_long'
        || $field['#field_type'] == 'text') {

            $field_settings = _get_usable_settings($field);

            if (isset($field_settings['clerkly_is_active']) && !empty($field_settings['clerkly_is_active'])) {
                if ($field_settings['clerkly_is_active'] == true && isset($field_settings['clerkly_max_chars'])) {
                    $variables['classes_array'][] = 'clerkly-field';
                    $variables['attributes_array'] = array('data-field' => $field['#field_name'],
                                                            'data-length' => $field_settings['clerkly_max_chars'],
                                                            'data-popup-text' => $field_settings['clerkly_popup_text']);

                }
            }
    }
}

function clerkly_preprocess_node(&$variables) {
    drupal_add_js(array('nid' => $variables['node']->nid), 'setting');
}
/**
 * Implements hook_form.
 */
function response_form($form, $form_state) {

    $form = array();

    $form['#prefix'] = '<div id="clerkly-popup-window">';
    $form['#suffix'] = '</div>';

    $form['message_container'] = array(
        '#markup' => '<div id="clerkly-message"></div>'
    );

    $form['clerkly_info'] = array(
        '#markup' => '<p id="clerkly-popup-text"></p>'
    );

    $form['clerkly_selected_info'] = array(
        '#markup' => '<strong id="clerkly-selected-info"></strong>'
    );

    $form['clerkly_comment'] = array(
        '#title' => t('Write your comment here'),
        '#type' => 'textfield',
        '#attributes'=>array('id'=>'clerkly-modal-comment')
    );
    $form['field_type'] = array(
        '#type' => 'hidden',
        '#value' => '',
        '#attributes'=>array(
            'id'=>'clerkly-popup-field'
        )
    );

    $form['selected_text'] = array(
        '#type' => 'hidden',
        '#value' => '',
        '#attributes'=>array(
            'id'=>'clerkly-selection'
        )
    );


    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send')
    );
    $form['#submit'][] = 'clerkly_response_form_submit';

    return $form;
}




function clerkly_response_form_submit($form, $form_state) {

    $field_type = '';
    $comment = '';
    $commands = array();
    $selected_text = '';
    if (isset($form_state['input']['field_type']) && !empty($form_state['input']['field_type'])) {
        $field_type = $form_state['input']['field_type'];
    } else {
        $html = _get_markup_response(
            array('message' => t('Request wasn\'t sent due to error'),
                'message_type' => 'error'));

        $commands[] = ajax_command_html('#clerkly-message', $html);
        print ajax_render($commands);
        drupal_exit();
    }

    if (isset($form_state['input']['selected_text']) && !empty($form_state['input']['selected_text'])) {
        $selected_text = $form_state['input']['selected_text'];
    } else {
        $html = _get_markup_response(
            array('message' => t('Request wasn\'t sent due to error'),
                'message_type' => 'error'));

        $commands[] = ajax_command_html('#clerkly-message', $html);
        print ajax_render($commands);
        drupal_exit();
    }

    if (isset($form_state['input']['clerkly_comment'])) {
        $comment = $form_state['input']['clerkly_comment'];
    }



    if (!_send_form_reply($field_type, $selected_text, $comment, $form_state['build_info'])) {
        $html = _get_markup_response(
            array('message' => t('Request wasn\'t sent due to error'),
            'message_type' => 'error'));

        $commands[] = ajax_command_replace('#clerkly-message-block', $html);
        drupal_exit();
    }

    $commands[] = ctools_modal_command_dismiss();

    print ajax_render($commands);
    drupal_exit();
}




